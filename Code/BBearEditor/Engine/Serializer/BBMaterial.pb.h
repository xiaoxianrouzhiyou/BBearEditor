// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BBMaterial.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BBMaterial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BBMaterial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BBVector.pb.h"
#include "BBCubeMap.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BBMaterial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BBMaterial_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BBMaterial_2eproto;
namespace BBSerializer {
class BBMaterial;
struct BBMaterialDefaultTypeInternal;
extern BBMaterialDefaultTypeInternal _BBMaterial_default_instance_;
}  // namespace BBSerializer
PROTOBUF_NAMESPACE_OPEN
template<> ::BBSerializer::BBMaterial* Arena::CreateMaybeMessage<::BBSerializer::BBMaterial>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BBSerializer {

// ===================================================================

class BBMaterial PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BBSerializer.BBMaterial) */ {
 public:
  inline BBMaterial() : BBMaterial(nullptr) {}
  ~BBMaterial() override;
  explicit constexpr BBMaterial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBMaterial(const BBMaterial& from);
  BBMaterial(BBMaterial&& from) noexcept
    : BBMaterial() {
    *this = ::std::move(from);
  }

  inline BBMaterial& operator=(const BBMaterial& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBMaterial& operator=(BBMaterial&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBMaterial& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBMaterial* internal_default_instance() {
    return reinterpret_cast<const BBMaterial*>(
               &_BBMaterial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BBMaterial& a, BBMaterial& b) {
    a.Swap(&b);
  }
  inline void Swap(BBMaterial* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBMaterial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BBMaterial* New() const final {
    return CreateMaybeMessage<BBMaterial>(nullptr);
  }

  BBMaterial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BBMaterial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BBMaterial& from);
  void MergeFrom(const BBMaterial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBMaterial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BBSerializer.BBMaterial";
  }
  protected:
  explicit BBMaterial(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureNameFieldNumber = 4,
    kTexturePathFieldNumber = 5,
    kFloatNameFieldNumber = 6,
    kFloatValueFieldNumber = 7,
    kVec4NameFieldNumber = 8,
    kVec4ValueFieldNumber = 9,
    kShaderNameFieldNumber = 1,
    kVShaderPathFieldNumber = 2,
    kFShaderPathFieldNumber = 3,
    kCubeMapNameFieldNumber = 15,
    kCubeMapPathsFieldNumber = 16,
    kSRCBlendFuncFieldNumber = 11,
    kBlendStateFieldNumber = 10,
    kCullStateFieldNumber = 13,
    kDSTBlendFuncFieldNumber = 12,
    kCullFaceFieldNumber = 14,
  };
  // repeated string textureName = 4;
  int texturename_size() const;
  private:
  int _internal_texturename_size() const;
  public:
  void clear_texturename();
  const std::string& texturename(int index) const;
  std::string* mutable_texturename(int index);
  void set_texturename(int index, const std::string& value);
  void set_texturename(int index, std::string&& value);
  void set_texturename(int index, const char* value);
  void set_texturename(int index, const char* value, size_t size);
  std::string* add_texturename();
  void add_texturename(const std::string& value);
  void add_texturename(std::string&& value);
  void add_texturename(const char* value);
  void add_texturename(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& texturename() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_texturename();
  private:
  const std::string& _internal_texturename(int index) const;
  std::string* _internal_add_texturename();
  public:

  // repeated string texturePath = 5;
  int texturepath_size() const;
  private:
  int _internal_texturepath_size() const;
  public:
  void clear_texturepath();
  const std::string& texturepath(int index) const;
  std::string* mutable_texturepath(int index);
  void set_texturepath(int index, const std::string& value);
  void set_texturepath(int index, std::string&& value);
  void set_texturepath(int index, const char* value);
  void set_texturepath(int index, const char* value, size_t size);
  std::string* add_texturepath();
  void add_texturepath(const std::string& value);
  void add_texturepath(std::string&& value);
  void add_texturepath(const char* value);
  void add_texturepath(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& texturepath() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_texturepath();
  private:
  const std::string& _internal_texturepath(int index) const;
  std::string* _internal_add_texturepath();
  public:

  // repeated string floatName = 6;
  int floatname_size() const;
  private:
  int _internal_floatname_size() const;
  public:
  void clear_floatname();
  const std::string& floatname(int index) const;
  std::string* mutable_floatname(int index);
  void set_floatname(int index, const std::string& value);
  void set_floatname(int index, std::string&& value);
  void set_floatname(int index, const char* value);
  void set_floatname(int index, const char* value, size_t size);
  std::string* add_floatname();
  void add_floatname(const std::string& value);
  void add_floatname(std::string&& value);
  void add_floatname(const char* value);
  void add_floatname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& floatname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_floatname();
  private:
  const std::string& _internal_floatname(int index) const;
  std::string* _internal_add_floatname();
  public:

  // repeated float floatValue = 7;
  int floatvalue_size() const;
  private:
  int _internal_floatvalue_size() const;
  public:
  void clear_floatvalue();
  private:
  float _internal_floatvalue(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floatvalue() const;
  void _internal_add_floatvalue(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floatvalue();
  public:
  float floatvalue(int index) const;
  void set_floatvalue(int index, float value);
  void add_floatvalue(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floatvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floatvalue();

  // repeated string vec4Name = 8;
  int vec4name_size() const;
  private:
  int _internal_vec4name_size() const;
  public:
  void clear_vec4name();
  const std::string& vec4name(int index) const;
  std::string* mutable_vec4name(int index);
  void set_vec4name(int index, const std::string& value);
  void set_vec4name(int index, std::string&& value);
  void set_vec4name(int index, const char* value);
  void set_vec4name(int index, const char* value, size_t size);
  std::string* add_vec4name();
  void add_vec4name(const std::string& value);
  void add_vec4name(std::string&& value);
  void add_vec4name(const char* value);
  void add_vec4name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vec4name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vec4name();
  private:
  const std::string& _internal_vec4name(int index) const;
  std::string* _internal_add_vec4name();
  public:

  // repeated .BBSerializer.BBVector4f vec4Value = 9;
  int vec4value_size() const;
  private:
  int _internal_vec4value_size() const;
  public:
  void clear_vec4value();
  ::BBSerializer::BBVector4f* mutable_vec4value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBSerializer::BBVector4f >*
      mutable_vec4value();
  private:
  const ::BBSerializer::BBVector4f& _internal_vec4value(int index) const;
  ::BBSerializer::BBVector4f* _internal_add_vec4value();
  public:
  const ::BBSerializer::BBVector4f& vec4value(int index) const;
  ::BBSerializer::BBVector4f* add_vec4value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBSerializer::BBVector4f >&
      vec4value() const;

  // string shaderName = 1;
  bool has_shadername() const;
  private:
  bool _internal_has_shadername() const;
  public:
  void clear_shadername();
  const std::string& shadername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shadername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shadername();
  std::string* release_shadername();
  void set_allocated_shadername(std::string* shadername);
  private:
  const std::string& _internal_shadername() const;
  void _internal_set_shadername(const std::string& value);
  std::string* _internal_mutable_shadername();
  public:

  // string vShaderPath = 2;
  bool has_vshaderpath() const;
  private:
  bool _internal_has_vshaderpath() const;
  public:
  void clear_vshaderpath();
  const std::string& vshaderpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vshaderpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vshaderpath();
  std::string* release_vshaderpath();
  void set_allocated_vshaderpath(std::string* vshaderpath);
  private:
  const std::string& _internal_vshaderpath() const;
  void _internal_set_vshaderpath(const std::string& value);
  std::string* _internal_mutable_vshaderpath();
  public:

  // string fShaderPath = 3;
  bool has_fshaderpath() const;
  private:
  bool _internal_has_fshaderpath() const;
  public:
  void clear_fshaderpath();
  const std::string& fshaderpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fshaderpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fshaderpath();
  std::string* release_fshaderpath();
  void set_allocated_fshaderpath(std::string* fshaderpath);
  private:
  const std::string& _internal_fshaderpath() const;
  void _internal_set_fshaderpath(const std::string& value);
  std::string* _internal_mutable_fshaderpath();
  public:

  // string cubeMapName = 15;
  bool has_cubemapname() const;
  private:
  bool _internal_has_cubemapname() const;
  public:
  void clear_cubemapname();
  const std::string& cubemapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cubemapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cubemapname();
  std::string* release_cubemapname();
  void set_allocated_cubemapname(std::string* cubemapname);
  private:
  const std::string& _internal_cubemapname() const;
  void _internal_set_cubemapname(const std::string& value);
  std::string* _internal_mutable_cubemapname();
  public:

  // .BBSerializer.BBCubeMap cubeMapPaths = 16;
  bool has_cubemappaths() const;
  private:
  bool _internal_has_cubemappaths() const;
  public:
  void clear_cubemappaths();
  const ::BBSerializer::BBCubeMap& cubemappaths() const;
  ::BBSerializer::BBCubeMap* release_cubemappaths();
  ::BBSerializer::BBCubeMap* mutable_cubemappaths();
  void set_allocated_cubemappaths(::BBSerializer::BBCubeMap* cubemappaths);
  private:
  const ::BBSerializer::BBCubeMap& _internal_cubemappaths() const;
  ::BBSerializer::BBCubeMap* _internal_mutable_cubemappaths();
  public:
  void unsafe_arena_set_allocated_cubemappaths(
      ::BBSerializer::BBCubeMap* cubemappaths);
  ::BBSerializer::BBCubeMap* unsafe_arena_release_cubemappaths();

  // int32 SRCBlendFunc = 11;
  bool has_srcblendfunc() const;
  private:
  bool _internal_has_srcblendfunc() const;
  public:
  void clear_srcblendfunc();
  ::PROTOBUF_NAMESPACE_ID::int32 srcblendfunc() const;
  void set_srcblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_srcblendfunc() const;
  void _internal_set_srcblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool blendState = 10;
  bool has_blendstate() const;
  private:
  bool _internal_has_blendstate() const;
  public:
  void clear_blendstate();
  bool blendstate() const;
  void set_blendstate(bool value);
  private:
  bool _internal_blendstate() const;
  void _internal_set_blendstate(bool value);
  public:

  // bool cullState = 13;
  bool has_cullstate() const;
  private:
  bool _internal_has_cullstate() const;
  public:
  void clear_cullstate();
  bool cullstate() const;
  void set_cullstate(bool value);
  private:
  bool _internal_cullstate() const;
  void _internal_set_cullstate(bool value);
  public:

  // int32 DSTBlendFunc = 12;
  bool has_dstblendfunc() const;
  private:
  bool _internal_has_dstblendfunc() const;
  public:
  void clear_dstblendfunc();
  ::PROTOBUF_NAMESPACE_ID::int32 dstblendfunc() const;
  void set_dstblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dstblendfunc() const;
  void _internal_set_dstblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cullFace = 14;
  bool has_cullface() const;
  private:
  bool _internal_has_cullface() const;
  public:
  void clear_cullface();
  ::PROTOBUF_NAMESPACE_ID::int32 cullface() const;
  void set_cullface(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cullface() const;
  void _internal_set_cullface(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:BBSerializer.BBMaterial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> texturename_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> texturepath_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> floatname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floatvalue_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vec4name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBSerializer::BBVector4f > vec4value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shadername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vshaderpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fshaderpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cubemapname_;
  ::BBSerializer::BBCubeMap* cubemappaths_;
  ::PROTOBUF_NAMESPACE_ID::int32 srcblendfunc_;
  bool blendstate_;
  bool cullstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 dstblendfunc_;
  ::PROTOBUF_NAMESPACE_ID::int32 cullface_;
  friend struct ::TableStruct_BBMaterial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BBMaterial

// string shaderName = 1;
inline bool BBMaterial::_internal_has_shadername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBMaterial::has_shadername() const {
  return _internal_has_shadername();
}
inline void BBMaterial::clear_shadername() {
  shadername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BBMaterial::shadername() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.shaderName)
  return _internal_shadername();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_shadername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 shadername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.shaderName)
}
inline std::string* BBMaterial::mutable_shadername() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.shaderName)
  return _internal_mutable_shadername();
}
inline const std::string& BBMaterial::_internal_shadername() const {
  return shadername_.Get();
}
inline void BBMaterial::_internal_set_shadername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shadername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_shadername() {
  _has_bits_[0] |= 0x00000001u;
  return shadername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_shadername() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.shaderName)
  if (!_internal_has_shadername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shadername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_shadername(std::string* shadername) {
  if (shadername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shadername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shadername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.shaderName)
}

// string vShaderPath = 2;
inline bool BBMaterial::_internal_has_vshaderpath() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBMaterial::has_vshaderpath() const {
  return _internal_has_vshaderpath();
}
inline void BBMaterial::clear_vshaderpath() {
  vshaderpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BBMaterial::vshaderpath() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.vShaderPath)
  return _internal_vshaderpath();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_vshaderpath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 vshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.vShaderPath)
}
inline std::string* BBMaterial::mutable_vshaderpath() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.vShaderPath)
  return _internal_mutable_vshaderpath();
}
inline const std::string& BBMaterial::_internal_vshaderpath() const {
  return vshaderpath_.Get();
}
inline void BBMaterial::_internal_set_vshaderpath(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_vshaderpath() {
  _has_bits_[0] |= 0x00000002u;
  return vshaderpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_vshaderpath() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.vShaderPath)
  if (!_internal_has_vshaderpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vshaderpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_vshaderpath(std::string* vshaderpath) {
  if (vshaderpath != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vshaderpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vshaderpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.vShaderPath)
}

// string fShaderPath = 3;
inline bool BBMaterial::_internal_has_fshaderpath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBMaterial::has_fshaderpath() const {
  return _internal_has_fshaderpath();
}
inline void BBMaterial::clear_fshaderpath() {
  fshaderpath_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BBMaterial::fshaderpath() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.fShaderPath)
  return _internal_fshaderpath();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_fshaderpath(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 fshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.fShaderPath)
}
inline std::string* BBMaterial::mutable_fshaderpath() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.fShaderPath)
  return _internal_mutable_fshaderpath();
}
inline const std::string& BBMaterial::_internal_fshaderpath() const {
  return fshaderpath_.Get();
}
inline void BBMaterial::_internal_set_fshaderpath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  fshaderpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_fshaderpath() {
  _has_bits_[0] |= 0x00000004u;
  return fshaderpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_fshaderpath() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.fShaderPath)
  if (!_internal_has_fshaderpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return fshaderpath_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_fshaderpath(std::string* fshaderpath) {
  if (fshaderpath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fshaderpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fshaderpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.fShaderPath)
}

// repeated string textureName = 4;
inline int BBMaterial::_internal_texturename_size() const {
  return texturename_.size();
}
inline int BBMaterial::texturename_size() const {
  return _internal_texturename_size();
}
inline void BBMaterial::clear_texturename() {
  texturename_.Clear();
}
inline std::string* BBMaterial::add_texturename() {
  // @@protoc_insertion_point(field_add_mutable:BBSerializer.BBMaterial.textureName)
  return _internal_add_texturename();
}
inline const std::string& BBMaterial::_internal_texturename(int index) const {
  return texturename_.Get(index);
}
inline const std::string& BBMaterial::texturename(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.textureName)
  return _internal_texturename(index);
}
inline std::string* BBMaterial::mutable_texturename(int index) {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.textureName)
  return texturename_.Mutable(index);
}
inline void BBMaterial::set_texturename(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.textureName)
  texturename_.Mutable(index)->assign(value);
}
inline void BBMaterial::set_texturename(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.textureName)
  texturename_.Mutable(index)->assign(std::move(value));
}
inline void BBMaterial::set_texturename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  texturename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BBSerializer.BBMaterial.textureName)
}
inline void BBMaterial::set_texturename(int index, const char* value, size_t size) {
  texturename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BBSerializer.BBMaterial.textureName)
}
inline std::string* BBMaterial::_internal_add_texturename() {
  return texturename_.Add();
}
inline void BBMaterial::add_texturename(const std::string& value) {
  texturename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.textureName)
}
inline void BBMaterial::add_texturename(std::string&& value) {
  texturename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.textureName)
}
inline void BBMaterial::add_texturename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  texturename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BBSerializer.BBMaterial.textureName)
}
inline void BBMaterial::add_texturename(const char* value, size_t size) {
  texturename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BBSerializer.BBMaterial.textureName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BBMaterial::texturename() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMaterial.textureName)
  return texturename_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BBMaterial::mutable_texturename() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMaterial.textureName)
  return &texturename_;
}

// repeated string texturePath = 5;
inline int BBMaterial::_internal_texturepath_size() const {
  return texturepath_.size();
}
inline int BBMaterial::texturepath_size() const {
  return _internal_texturepath_size();
}
inline void BBMaterial::clear_texturepath() {
  texturepath_.Clear();
}
inline std::string* BBMaterial::add_texturepath() {
  // @@protoc_insertion_point(field_add_mutable:BBSerializer.BBMaterial.texturePath)
  return _internal_add_texturepath();
}
inline const std::string& BBMaterial::_internal_texturepath(int index) const {
  return texturepath_.Get(index);
}
inline const std::string& BBMaterial::texturepath(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.texturePath)
  return _internal_texturepath(index);
}
inline std::string* BBMaterial::mutable_texturepath(int index) {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.texturePath)
  return texturepath_.Mutable(index);
}
inline void BBMaterial::set_texturepath(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.texturePath)
  texturepath_.Mutable(index)->assign(value);
}
inline void BBMaterial::set_texturepath(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.texturePath)
  texturepath_.Mutable(index)->assign(std::move(value));
}
inline void BBMaterial::set_texturepath(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  texturepath_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BBSerializer.BBMaterial.texturePath)
}
inline void BBMaterial::set_texturepath(int index, const char* value, size_t size) {
  texturepath_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BBSerializer.BBMaterial.texturePath)
}
inline std::string* BBMaterial::_internal_add_texturepath() {
  return texturepath_.Add();
}
inline void BBMaterial::add_texturepath(const std::string& value) {
  texturepath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.texturePath)
}
inline void BBMaterial::add_texturepath(std::string&& value) {
  texturepath_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.texturePath)
}
inline void BBMaterial::add_texturepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  texturepath_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BBSerializer.BBMaterial.texturePath)
}
inline void BBMaterial::add_texturepath(const char* value, size_t size) {
  texturepath_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BBSerializer.BBMaterial.texturePath)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BBMaterial::texturepath() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMaterial.texturePath)
  return texturepath_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BBMaterial::mutable_texturepath() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMaterial.texturePath)
  return &texturepath_;
}

// repeated string floatName = 6;
inline int BBMaterial::_internal_floatname_size() const {
  return floatname_.size();
}
inline int BBMaterial::floatname_size() const {
  return _internal_floatname_size();
}
inline void BBMaterial::clear_floatname() {
  floatname_.Clear();
}
inline std::string* BBMaterial::add_floatname() {
  // @@protoc_insertion_point(field_add_mutable:BBSerializer.BBMaterial.floatName)
  return _internal_add_floatname();
}
inline const std::string& BBMaterial::_internal_floatname(int index) const {
  return floatname_.Get(index);
}
inline const std::string& BBMaterial::floatname(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.floatName)
  return _internal_floatname(index);
}
inline std::string* BBMaterial::mutable_floatname(int index) {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.floatName)
  return floatname_.Mutable(index);
}
inline void BBMaterial::set_floatname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.floatName)
  floatname_.Mutable(index)->assign(value);
}
inline void BBMaterial::set_floatname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.floatName)
  floatname_.Mutable(index)->assign(std::move(value));
}
inline void BBMaterial::set_floatname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  floatname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BBSerializer.BBMaterial.floatName)
}
inline void BBMaterial::set_floatname(int index, const char* value, size_t size) {
  floatname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BBSerializer.BBMaterial.floatName)
}
inline std::string* BBMaterial::_internal_add_floatname() {
  return floatname_.Add();
}
inline void BBMaterial::add_floatname(const std::string& value) {
  floatname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.floatName)
}
inline void BBMaterial::add_floatname(std::string&& value) {
  floatname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.floatName)
}
inline void BBMaterial::add_floatname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  floatname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BBSerializer.BBMaterial.floatName)
}
inline void BBMaterial::add_floatname(const char* value, size_t size) {
  floatname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BBSerializer.BBMaterial.floatName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BBMaterial::floatname() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMaterial.floatName)
  return floatname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BBMaterial::mutable_floatname() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMaterial.floatName)
  return &floatname_;
}

// repeated float floatValue = 7;
inline int BBMaterial::_internal_floatvalue_size() const {
  return floatvalue_.size();
}
inline int BBMaterial::floatvalue_size() const {
  return _internal_floatvalue_size();
}
inline void BBMaterial::clear_floatvalue() {
  floatvalue_.Clear();
}
inline float BBMaterial::_internal_floatvalue(int index) const {
  return floatvalue_.Get(index);
}
inline float BBMaterial::floatvalue(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.floatValue)
  return _internal_floatvalue(index);
}
inline void BBMaterial::set_floatvalue(int index, float value) {
  floatvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.floatValue)
}
inline void BBMaterial::_internal_add_floatvalue(float value) {
  floatvalue_.Add(value);
}
inline void BBMaterial::add_floatvalue(float value) {
  _internal_add_floatvalue(value);
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.floatValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBMaterial::_internal_floatvalue() const {
  return floatvalue_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BBMaterial::floatvalue() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMaterial.floatValue)
  return _internal_floatvalue();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBMaterial::_internal_mutable_floatvalue() {
  return &floatvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BBMaterial::mutable_floatvalue() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMaterial.floatValue)
  return _internal_mutable_floatvalue();
}

// repeated string vec4Name = 8;
inline int BBMaterial::_internal_vec4name_size() const {
  return vec4name_.size();
}
inline int BBMaterial::vec4name_size() const {
  return _internal_vec4name_size();
}
inline void BBMaterial::clear_vec4name() {
  vec4name_.Clear();
}
inline std::string* BBMaterial::add_vec4name() {
  // @@protoc_insertion_point(field_add_mutable:BBSerializer.BBMaterial.vec4Name)
  return _internal_add_vec4name();
}
inline const std::string& BBMaterial::_internal_vec4name(int index) const {
  return vec4name_.Get(index);
}
inline const std::string& BBMaterial::vec4name(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.vec4Name)
  return _internal_vec4name(index);
}
inline std::string* BBMaterial::mutable_vec4name(int index) {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.vec4Name)
  return vec4name_.Mutable(index);
}
inline void BBMaterial::set_vec4name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.vec4Name)
  vec4name_.Mutable(index)->assign(value);
}
inline void BBMaterial::set_vec4name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.vec4Name)
  vec4name_.Mutable(index)->assign(std::move(value));
}
inline void BBMaterial::set_vec4name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vec4name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BBSerializer.BBMaterial.vec4Name)
}
inline void BBMaterial::set_vec4name(int index, const char* value, size_t size) {
  vec4name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BBSerializer.BBMaterial.vec4Name)
}
inline std::string* BBMaterial::_internal_add_vec4name() {
  return vec4name_.Add();
}
inline void BBMaterial::add_vec4name(const std::string& value) {
  vec4name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.vec4Name)
}
inline void BBMaterial::add_vec4name(std::string&& value) {
  vec4name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.vec4Name)
}
inline void BBMaterial::add_vec4name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vec4name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BBSerializer.BBMaterial.vec4Name)
}
inline void BBMaterial::add_vec4name(const char* value, size_t size) {
  vec4name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BBSerializer.BBMaterial.vec4Name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BBMaterial::vec4name() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMaterial.vec4Name)
  return vec4name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BBMaterial::mutable_vec4name() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMaterial.vec4Name)
  return &vec4name_;
}

// repeated .BBSerializer.BBVector4f vec4Value = 9;
inline int BBMaterial::_internal_vec4value_size() const {
  return vec4value_.size();
}
inline int BBMaterial::vec4value_size() const {
  return _internal_vec4value_size();
}
inline ::BBSerializer::BBVector4f* BBMaterial::mutable_vec4value(int index) {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.vec4Value)
  return vec4value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBSerializer::BBVector4f >*
BBMaterial::mutable_vec4value() {
  // @@protoc_insertion_point(field_mutable_list:BBSerializer.BBMaterial.vec4Value)
  return &vec4value_;
}
inline const ::BBSerializer::BBVector4f& BBMaterial::_internal_vec4value(int index) const {
  return vec4value_.Get(index);
}
inline const ::BBSerializer::BBVector4f& BBMaterial::vec4value(int index) const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.vec4Value)
  return _internal_vec4value(index);
}
inline ::BBSerializer::BBVector4f* BBMaterial::_internal_add_vec4value() {
  return vec4value_.Add();
}
inline ::BBSerializer::BBVector4f* BBMaterial::add_vec4value() {
  // @@protoc_insertion_point(field_add:BBSerializer.BBMaterial.vec4Value)
  return _internal_add_vec4value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BBSerializer::BBVector4f >&
BBMaterial::vec4value() const {
  // @@protoc_insertion_point(field_list:BBSerializer.BBMaterial.vec4Value)
  return vec4value_;
}

// bool blendState = 10;
inline bool BBMaterial::_internal_has_blendstate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BBMaterial::has_blendstate() const {
  return _internal_has_blendstate();
}
inline void BBMaterial::clear_blendstate() {
  blendstate_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool BBMaterial::_internal_blendstate() const {
  return blendstate_;
}
inline bool BBMaterial::blendstate() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.blendState)
  return _internal_blendstate();
}
inline void BBMaterial::_internal_set_blendstate(bool value) {
  _has_bits_[0] |= 0x00000040u;
  blendstate_ = value;
}
inline void BBMaterial::set_blendstate(bool value) {
  _internal_set_blendstate(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.blendState)
}

// int32 SRCBlendFunc = 11;
inline bool BBMaterial::_internal_has_srcblendfunc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BBMaterial::has_srcblendfunc() const {
  return _internal_has_srcblendfunc();
}
inline void BBMaterial::clear_srcblendfunc() {
  srcblendfunc_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBMaterial::_internal_srcblendfunc() const {
  return srcblendfunc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBMaterial::srcblendfunc() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.SRCBlendFunc)
  return _internal_srcblendfunc();
}
inline void BBMaterial::_internal_set_srcblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  srcblendfunc_ = value;
}
inline void BBMaterial::set_srcblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_srcblendfunc(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.SRCBlendFunc)
}

// int32 DSTBlendFunc = 12;
inline bool BBMaterial::_internal_has_dstblendfunc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BBMaterial::has_dstblendfunc() const {
  return _internal_has_dstblendfunc();
}
inline void BBMaterial::clear_dstblendfunc() {
  dstblendfunc_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBMaterial::_internal_dstblendfunc() const {
  return dstblendfunc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBMaterial::dstblendfunc() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.DSTBlendFunc)
  return _internal_dstblendfunc();
}
inline void BBMaterial::_internal_set_dstblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  dstblendfunc_ = value;
}
inline void BBMaterial::set_dstblendfunc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dstblendfunc(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.DSTBlendFunc)
}

// bool cullState = 13;
inline bool BBMaterial::_internal_has_cullstate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BBMaterial::has_cullstate() const {
  return _internal_has_cullstate();
}
inline void BBMaterial::clear_cullstate() {
  cullstate_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool BBMaterial::_internal_cullstate() const {
  return cullstate_;
}
inline bool BBMaterial::cullstate() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.cullState)
  return _internal_cullstate();
}
inline void BBMaterial::_internal_set_cullstate(bool value) {
  _has_bits_[0] |= 0x00000080u;
  cullstate_ = value;
}
inline void BBMaterial::set_cullstate(bool value) {
  _internal_set_cullstate(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.cullState)
}

// int32 cullFace = 14;
inline bool BBMaterial::_internal_has_cullface() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BBMaterial::has_cullface() const {
  return _internal_has_cullface();
}
inline void BBMaterial::clear_cullface() {
  cullface_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBMaterial::_internal_cullface() const {
  return cullface_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BBMaterial::cullface() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.cullFace)
  return _internal_cullface();
}
inline void BBMaterial::_internal_set_cullface(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  cullface_ = value;
}
inline void BBMaterial::set_cullface(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cullface(value);
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.cullFace)
}

// string cubeMapName = 15;
inline bool BBMaterial::_internal_has_cubemapname() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BBMaterial::has_cubemapname() const {
  return _internal_has_cubemapname();
}
inline void BBMaterial::clear_cubemapname() {
  cubemapname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BBMaterial::cubemapname() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.cubeMapName)
  return _internal_cubemapname();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void BBMaterial::set_cubemapname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 cubemapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:BBSerializer.BBMaterial.cubeMapName)
}
inline std::string* BBMaterial::mutable_cubemapname() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.cubeMapName)
  return _internal_mutable_cubemapname();
}
inline const std::string& BBMaterial::_internal_cubemapname() const {
  return cubemapname_.Get();
}
inline void BBMaterial::_internal_set_cubemapname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cubemapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* BBMaterial::_internal_mutable_cubemapname() {
  _has_bits_[0] |= 0x00000008u;
  return cubemapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BBMaterial::release_cubemapname() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.cubeMapName)
  if (!_internal_has_cubemapname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return cubemapname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BBMaterial::set_allocated_cubemapname(std::string* cubemapname) {
  if (cubemapname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cubemapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cubemapname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.cubeMapName)
}

// .BBSerializer.BBCubeMap cubeMapPaths = 16;
inline bool BBMaterial::_internal_has_cubemappaths() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || cubemappaths_ != nullptr);
  return value;
}
inline bool BBMaterial::has_cubemappaths() const {
  return _internal_has_cubemappaths();
}
inline const ::BBSerializer::BBCubeMap& BBMaterial::_internal_cubemappaths() const {
  const ::BBSerializer::BBCubeMap* p = cubemappaths_;
  return p != nullptr ? *p : reinterpret_cast<const ::BBSerializer::BBCubeMap&>(
      ::BBSerializer::_BBCubeMap_default_instance_);
}
inline const ::BBSerializer::BBCubeMap& BBMaterial::cubemappaths() const {
  // @@protoc_insertion_point(field_get:BBSerializer.BBMaterial.cubeMapPaths)
  return _internal_cubemappaths();
}
inline void BBMaterial::unsafe_arena_set_allocated_cubemappaths(
    ::BBSerializer::BBCubeMap* cubemappaths) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cubemappaths_);
  }
  cubemappaths_ = cubemappaths;
  if (cubemappaths) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BBSerializer.BBMaterial.cubeMapPaths)
}
inline ::BBSerializer::BBCubeMap* BBMaterial::release_cubemappaths() {
  _has_bits_[0] &= ~0x00000010u;
  ::BBSerializer::BBCubeMap* temp = cubemappaths_;
  cubemappaths_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BBSerializer::BBCubeMap* BBMaterial::unsafe_arena_release_cubemappaths() {
  // @@protoc_insertion_point(field_release:BBSerializer.BBMaterial.cubeMapPaths)
  _has_bits_[0] &= ~0x00000010u;
  ::BBSerializer::BBCubeMap* temp = cubemappaths_;
  cubemappaths_ = nullptr;
  return temp;
}
inline ::BBSerializer::BBCubeMap* BBMaterial::_internal_mutable_cubemappaths() {
  _has_bits_[0] |= 0x00000010u;
  if (cubemappaths_ == nullptr) {
    auto* p = CreateMaybeMessage<::BBSerializer::BBCubeMap>(GetArena());
    cubemappaths_ = p;
  }
  return cubemappaths_;
}
inline ::BBSerializer::BBCubeMap* BBMaterial::mutable_cubemappaths() {
  // @@protoc_insertion_point(field_mutable:BBSerializer.BBMaterial.cubeMapPaths)
  return _internal_mutable_cubemappaths();
}
inline void BBMaterial::set_allocated_cubemappaths(::BBSerializer::BBCubeMap* cubemappaths) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cubemappaths_);
  }
  if (cubemappaths) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cubemappaths)->GetArena();
    if (message_arena != submessage_arena) {
      cubemappaths = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cubemappaths, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cubemappaths_ = cubemappaths;
  // @@protoc_insertion_point(field_set_allocated:BBSerializer.BBMaterial.cubeMapPaths)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace BBSerializer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BBMaterial_2eproto
